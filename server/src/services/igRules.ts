import { prisma } from '../prisma.js';

export type RuleResult =
  | { action: 'mute'; reply?: string }
  | { action: 'handoff'; reply?: string }
  | { action: 'night'; reply?: string }
  | { action: 'greet'; reply: string }
  | { action: 'none' };

function isNight(now = new Date()) {
  const hour = now.getHours();
  return hour < 9 || hour >= 21; // 21:00‚Äì09:00 ‚Äî ¬´—Ç–∏—Ö–∏–π¬ª –ø–µ—Ä–∏–æ–¥
}

function isStop(text?: string) {
  if (!text) return false;
  const t = text.trim().toLowerCase();
  return ['stop', '—Å—Ç–æ–ø', '–æ—Ç–ø–∏—Å–∫–∞', 'unsubscribe'].some(x => t.includes(x));
}

function isHandoff(text?: string) {
  if (!text) return false;
  const t = text.trim().toLowerCase();
  return ['–º–µ–Ω–µ–¥–∂–µ—Ä', '–æ–ø–µ—Ä–∞—Ç–æ—Ä', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–ø–æ–∑–≤–∞—Ç—å', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', 'manager', 'agent', 'human'].some(x => t.includes(x));
}

export async function applyRules({
  contactId,
  text,
}: {
  contactId: string;
  text?: string;
}): Promise<RuleResult> {
  const now = new Date();

  // 0) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–ª–¥–∞—É–Ω (–∞–Ω—Ç–∏—Å–ø–∞–º) ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–±—ã—Ç–∏–µ <30—Å
  const lastOut = await prisma.igEvent.findFirst({
    where: { thread: { contactId }, direction: 'out' },
    orderBy: { at: 'desc' }
  });
  if (lastOut && now.getTime() - lastOut.at.getTime() < 30_000) {
    return { action: 'none' }; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
  }

  // 1) STOP ‚Üí mute
  if (isStop(text)) {
    await prisma.igContact.update({
      where: { id: contactId },
      data: { status: 'muted' }
    });
    return { action: 'mute', reply: '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ ¬´–°—Ç–∞—Ä—Ç¬ª, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞.' };
  }

  // 1b) START ‚Üí –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏–∑ mute
  if (text && text.trim().toLowerCase().includes('—Å—Ç–∞—Ä—Ç')) {
    await prisma.igContact.update({
      where: { id: contactId },
      data: { status: 'bot' }
    });
    return { action: 'greet', reply: '–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ' };
  }

  // 2) –•–µ–Ω–¥-–æ—Ñ—Ñ –º–µ–Ω–µ–¥–∂–µ—Ä—É
  if (isHandoff(text)) {
    await prisma.igContact.update({
      where: { id: contactId },
      data: { status: 'manager' }
    });
    return { action: 'handoff', reply: '–ü–µ—Ä–µ–¥–∞–ª –≤–∞—à –¥–∏–∞–ª–æ–≥ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.' };
  }

  // 3) –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
  const contact = await prisma.igContact.findUnique({ where: { id: contactId } });
  if (contact && contact.status === 'bot' && isNight(now)) {
    return { action: 'night', reply: '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–µ–π—á–∞—Å –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è ‚Äî –º—ã –æ—Ç–≤–µ—Ç–∏–º —É—Ç—Ä–æ–º.' };
  }

  // 4) –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (IgRule)
  if (text) {
    const rules = await prisma.igRule.findMany({ where: { active: true } });
    const lower = text.toLowerCase();
    for (const rule of rules) {
      if (lower.includes(rule.keyword.toLowerCase())) {
        return { action: 'greet', reply: rule.reply };
      }
    }
  }

  // 5) –ë–∞–∑–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  return { action: 'greet', reply: '–ü—Ä–∏–≤–µ—Ç! –Ø –æ–Ω–ª–∞–π–Ω-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üòä' };
}
