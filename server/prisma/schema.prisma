generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// existing models would go here

model IgContact {
  id            String   @id @default(cuid())
  igUserId      String   @unique // PSID пользователя из IG
  username      String?          // если доступно через дополнительные запросы
  fullName      String?
  locale        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  threads       IgThread[]
  status        String   @default("bot") // bot | manager | muted
  notes         String?
}

model IgThread {
  id            String   @id @default(cuid())
  contactId     String
  contact       IgContact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  pageId        String?   // FB Page ID
  state         String    @default("active") // active | archived
  lastMessageAt DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  events        IgEvent[]
}

model IgEvent {
  id         String   @id @default(cuid())
  threadId   String
  thread     IgThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  direction  String   // in | out
  type       String   // text | attachment | postback | system
  text       String?
  payload    Json?
  extId      String?  @unique // внешний ID события (mid или event id)
  at         DateTime @default(now())
}

model IgRule {
  id        String   @id @default(cuid())
  keyword   String
  reply     String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IgSetting {
  id           Int      @id @default(1)
  tz           String   @default("Asia/Bishkek") // таймзона IANA
  quietStart   String   @default("21:00")        // формат HH:mm
  quietEnd     String   @default("09:00")        // формат HH:mm
  quickReplies String?                           // JSON: string[] (кнопки)
  // --- AI ---
  aiEnabled    Boolean  @default(false)
  aiModel      String?
  aiTemperature Float   @default(0.7)
  systemPrompt String?
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

model Usage {
  id              String   @id @default(cuid())
  userId          String
  model           String
  promptTokens    Int
  completionTokens Int
  costUsd         Float    @default(0)
  createdAt       DateTime @default(now())
}

model Flow {
  id         String   @id @default(cuid())
  name       String
  active     Boolean  @default(true)
  entry      String   // id шага-входа
  nodes      Json     // { [id]: { type, text?, quick?, next?, waitSec? ... } }
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  triggers   FlowTrigger[]
}

model FlowTrigger {
  id        String   @id @default(cuid())
  flowId    String
  flow      Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)

  kind      String   // "keyword" | "quick" | "story_mention" | "referral" | "any"
  value     String   // для keyword/quick/referral (payload/текст); для "any" оставить пустым

  // временные ограничения (опционально)
  active    Boolean  @default(true)
  startAt   DateTime?
  endAt     DateTime?
  daysMask  Int?     // битовая маска дней недели: 1=Mon,2=Tue,...,64=Sun; например 127=все дни

  meta      Json?    // запасное поле для будущих условий

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FlowState {
  id         String   @id @default(cuid())
  contactId  String
  threadId   String
  flowId     String
  nodeId     String
  status     String   @default("running") // running | done | paused
  resumeAt   DateTime?
  payload    Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model IntegrationError {
  id        String   @id @default(cuid())
  source    String   // 'IG_GRAPH' | 'OPENAI' | 'TELEGRAM' | 'SCHEDULER' | ...
  code      String?
  message   String?
  meta      Json?
  createdAt DateTime @default(now())
}

model Outbox {
  id        String   @id @default(cuid())
  type      String   // 'IG' | 'OPENAI' | 'TELEGRAM'
  payload   Json
  status    String   @default("pending") // pending|sent|error
  attempts  Int      @default(0)
  lastError String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
